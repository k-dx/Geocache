<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" type="text/css" href="/styles/output.css" >
    <title>Create or edit route</title>
</head>
<body>
    <div class="h-screen grid grid-cols-2 dark:bg-gray-900">
        <div id="map">
            Map should appear here. Please contact support if it doesn't.
            <%# Loaded by script %>
        </div>
        <div class="p-4 overflow-auto">
            <% if (locals.message) { %>
                <div class="flex items-center p-4 mb-4 text-sm text-red-800 border border-red-300 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400 dark:border-red-800" role="alert">
                    <svg class="flex-shrink-0 inline w-4 h-4 me-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z"/>
                    </svg>
                    <span class="sr-only">Info</span>
                    <div>
                        <%= locals.message %>
                    </div>
                  </div>
            <% } %>
            <form action="/admin/routes/<%= locals.mode %>" method="post">
                <% if (locals.mode === 'edit') { %>
                    <input type="hidden" name="route_id" value="<%= locals.route.id %>">
                <% } %>

                <label for="name" class="block mb-2 font-medium text-gray-900 dark:text-white">Route name</label>
                <input type="text" id="name" name="name" placeholder="My great route" required class="mb-4 bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                <div class="waypoints mb-4">
                    <%# Filled by client-side javascript %>
                </div>
                
                <input class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800 hover:cursor-pointer" type="submit" value="Save route">
                <a href="/admin/routes/list" class="inline-block text-white bg-gray-700 hover:bg-gray-800 focus:ring-4 focus:ring-gray-300 font-medium rounded-lg px-5 py-2.5 me-2 mb-2 dark:bg-gray-600 dark:hover:bg-gray-700 focus:outline-none dark:focus:ring-gray-800 hover:cursor-pointer">Cancel</a>
                <button type="button" class="add-waypoint text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">Add waypoint</button>
                <button type="button" class="remove-waypoint text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">Remove waypoint</button>
            </form>
        </div>

               
        <div id="toast-edit-info" class="hidden fixed top-10 left-1/2 transform -translate-x-1/2 flex items-center w-full max-w-sm p-4 text-gray-500 bg-white rounded-lg drop-shadow-lg shadow-lg dark:text-gray-400 dark:bg-gray-800" role="alert">
            <div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-blue-500 bg-blue-100 rounded-lg dark:bg-blue-800 dark:text-blue-200">
                <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9h2v5m-2 0h4M9.408 5.5h.01M19 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"/>
                </svg>
                <span class="sr-only">Info icon</span>
            </div>
            <div class="ms-3 font-normal">Click "Edit" button and click anywhere on a map to place a marker. Then click "Save" next to waypoint.</div>
            <button id="edit-info-dismiss-btn" type="button" class="ms-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex items-center justify-center h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700" data-dismiss-target="#toast-edit-info" aria-label="Close">
                <span class="sr-only">Close</span>
                <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
                </svg>
            </button>
        </div>
    </div>

    <script
      src="https://maps.googleapis.com/maps/api/js?key=<%= locals.googleMapsApiKey %>&callback=initMap&v=weekly"
      defer
    ></script>
    <script>
        var map;
        var markers = [];
        var currentEditListener = null;

        function initMap() {
            var initialLocation = {
                lat: 0,
                lng: 0
            };

            map = new google.maps.Map(document.getElementById('map'), {
                zoom: 1,
                center: initialLocation,
                clickableIcons: true // Enable click events on POIs
            });

            init();
        }

        function removeLastWaypoint () {
            const w = document.querySelectorAll('.waypoint-entry');
            if (w.length === 1) return;
            w[w.length - 1].remove();
            // remove marker from map
            markers[markers.length - 1].setMap(null);
            markers.pop();
        }

        function getNextId () {
            const waypoints = document.querySelectorAll('[data-id]');
            if (waypoints.length === 0) return 0;
            const currentId = Number(waypoints[waypoints.length - 1].dataset.id);
            return currentId + 1;
        }

        // <%# The event that happens when user clicks on map (while editing a waypoint). %>
        var clickListener = function(event) {
            markers[this.id].setVisible(true);
            markers[this.id].setPosition(event.latLng);

            const latInput = document.querySelector(`#w${this.id}-lat`);
            latInput.value = event.latLng.lat();
            const lngInput = document.querySelector(`#w${this.id}-lng`);
            lngInput.value = event.latLng.lng();
        };

        // <%# Adds a waypoint. 
        // If no arguments given, then it is "empty" and not visible on the map.
        // Otherwise it is visible on the map and has its form filled with current data. %>
        function addWaypoint ({ id=null, orderId_=null, lat=null, lng=null, name='' } = {}) {
            const orderId = orderId_ !== null ? orderId_ : getNextId();
            const waypointContainer = document.createElement('div');
            waypointContainer.classList.add('waypoint-entry');
            waypointContainer.dataset.id = orderId;

            const idInputId = `w${orderId}-id`;
            const orderIdInputId = `w${orderId}-order-id`;
            const latInputId = `w${orderId}-lat`;
            const lngInputId = `w${orderId}-lng`;
            const nameInputId = `w${orderId}-name`;
            const editButtonId = `w${orderId}-edit`;
            const saveButtonId = `w${orderId}-save`;
            const waypointInner = 
           `<p class="block mb-2 font-medium text-gray-900 dark:text-white">Waypoint ${orderId}</p>
            <div class="flex flex-wrap justify-stretch gap-2 mb-2">
                <input hidden type="number" name="${idInputId}" value="${id}">
                <input hidden type="number" name="${orderIdInputId}" value="${orderId}">
                <input id="${nameInputId}" type="text" name="${nameInputId}" placeholder="waypoint name"  class="grow bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">

                <input id="${latInputId}" type="text" name="${latInputId}" readonly class="w-36 bg-gray-100 border border-gray-300 text-gray-900 rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 cursor-not-allowed dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500">

                <input id="${lngInputId}" type="text" name="${lngInputId}" readonly class="w-36 bg-gray-100 border border-gray-300 text-gray-900 rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 cursor-not-allowed dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500">

                <button id="${editButtonId}" type="button" class="w-20 text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg px-5 py-2.5 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">Edit</button>

                <button id="${saveButtonId}" type="button" class="w-20 hidden focus:outline-none text-white bg-green-700 hover:bg-green-800 focus:ring-4 focus:ring-green-300 font-medium rounded-lg px-5 py-2.5 dark:bg-green-600 dark:hover:bg-green-700 dark:focus:ring-green-800">Save</button>
            </div>`;

            waypointContainer.innerHTML = waypointInner;

            const waypointsContainer = document.querySelector('.waypoints');
            waypointsContainer.append(waypointContainer);

            const marker = new google.maps.Marker({
                position: { lat: Number(lat), lng: Number(lng) },
                label: { text: String(orderId), color: 'white' },
                map: map,
                visible: Boolean(orderId_ !== null)
            });
            markers.push(marker);
            const latInput = document.querySelector(`#${latInputId}`);
            latInput.value = lat;
            const lngInput = document.querySelector(`#${lngInputId}`);
            lngInput.value = lng;
            const nameInput = document.querySelector(`#${nameInputId}`);
            nameInput.value = name;
            const editButton = document.querySelector(`#${editButtonId}`);
            const saveButton = document.querySelector(`#${saveButtonId}`);
            editButton.addEventListener('click', function () {
                currentEditListener = map.addListener('click', clickListener.bind({id: orderId}));

                editButton.classList.add('hidden');
                saveButton.classList.remove('hidden');
            });
            saveButton.addEventListener('click', function () {
                google.maps.event.removeListener(currentEditListener);

                editButton.classList.remove('hidden');
                saveButton.classList.add('hidden');
            });
        }

        // <%# Prefills form (and map) with waypoints from the server %>
        function prefillForm () {
            const nameInput = document.querySelector('input[name="name"]');
            nameInput.value = '<%= locals.route.name %>';
        
            const waypoints = <%- JSON.stringify(locals.waypoints) %>;
            if (waypoints.length === 0) {
                addWaypoint();
            } else {
                waypoints.forEach(waypoint => {
                    addWaypoint({
                        id: waypoint.id,
                        orderId_: waypoint.order_id,
                        lat: waypoint.latitude,
                        lng: waypoint.longitude,
                        name: waypoint.name
                    });
                });
            }
        }

        function fitViewToMarkers () {
            const bounds = new google.maps.LatLngBounds();
            markers.forEach(marker => {
                bounds.extend(marker.getPosition());
            });
            map.fitBounds(bounds);
        }

        // https://stackoverflow.com/questions/4825683/how-do-i-create-and-read-a-value-from-cookie-with-javascript
        const setCookie = (name, value, days = 7, path = '/') => {
            const expires = new Date(Date.now() + days * 864e5).toUTCString()
            document.cookie = name + '=' + encodeURIComponent(value) + '; expires=' + expires + '; path=' + path
        }
        const getCookie = (name) => {
            return document.cookie.split('; ').reduce((r, v) => {
                const parts = v.split('=')
                return parts[0] === name ? decodeURIComponent(parts[1]) : r
            }, '')
        }
        const deleteCookie = (name, path) => {
            setCookie(name, '', -1, path)
        }

        // <%# Initializes buttons and prefills form (with waypoints from the server) %>
        function init () {
            const addButton = document.querySelector('.add-waypoint');
            addButton.addEventListener('click', addWaypoint);
            const removeButton = document.querySelector('.remove-waypoint');
            removeButton.addEventListener('click', removeLastWaypoint);

            const toast = document.querySelector('#toast-edit-info');
            const editToastDismissed = 'edit-info-dismissed';
            if (getCookie(editToastDismissed) !== 'true') {
                document.cookie = "name=value; expires=Fri, 31 Dec 9999 23:59:59 GMT; path=/";
                toast.classList.remove('hidden');  
            }
            const editInfoDismissButton = document.querySelector('#edit-info-dismiss-btn');
            editInfoDismissButton.addEventListener('click', function () {
                toast.classList.add('hidden');
                setCookie(editToastDismissed, true, 9999);
            });
            
            prefillForm();
            
            if (!(markers[0].getPosition().lat() === 0 && markers[0].getPosition().lng() === 0)) {
                fitViewToMarkers();
            }
        }
    </script>
    <%- include('end-scripts') %>
</body>
</html>